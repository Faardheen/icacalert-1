{"version":3,"sources":["../../server/utils/auth.js"],"names":["createTokens","user","secret","secret2","createToken","jwt","sign","_","pick","expiresIn","createRefreshToken","refreshTokens","token","refreshToken","SECRET","SECRET2","userId","decode","id","User","findOne","refreshSecret","password","verify","newToken","newRefreshToken","tryLogin","email","model","ok","errors","path","message","bcrypt","compare","valid","refreshTokenSecret"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\nimport _ from 'lodash';\nimport bcrypt from 'bcrypt';\nimport User from '../models/User.js';\n\nexport const createTokens = async (user, secret, secret2) => {\n\tconst createToken = jwt.sign(\n\t\t{\n\t\t\tuser: _.pick(user, ['id', 'email']),\n\t\t},\n\t\tsecret,\n\t\t{\n\t\t\texpiresIn: '7d',\n\t\t},\n\t);\n\n\tconst createRefreshToken = jwt.sign(\n\t\t{\n\t\t\tuser: _.pick(user, 'id'),\n\t\t},\n\t\tsecret2,\n\t\t{\n\t\t\texpiresIn: '7d',\n\t\t},\n\t);\n\n\treturn [createToken, createRefreshToken];\n};\n\nexport const refreshTokens = async (token, refreshToken, SECRET, SECRET2) => {\n\tlet userId = 0;\n\ttry {\n\t\tconst {\n\t\t\tuser: { id },\n\t\t} = jwt.decode(refreshToken);\n\t\tuserId = id;\n\t} catch (err) {\n\t\treturn {};\n\t}\n\n\tif (!userId) {\n\t\treturn {};\n\t}\n\n\tconst user = await User.findOne({ id: userId });\n\n\tif (!user) {\n\t\treturn {};\n\t}\n\n\tconst refreshSecret = user.password + SECRET2;\n\n\ttry {\n\t\tjwt.verify(refreshToken, refreshSecret);\n\t} catch (err) {\n\t\treturn {};\n\t}\n\n\tconst [newToken, newRefreshToken] = await createTokens(\n\t\tuser,\n\t\tSECRET,\n\t\trefreshSecret,\n\t);\n\treturn {\n\t\ttoken: newToken,\n\t\trefreshToken: newRefreshToken,\n\t\tuser,\n\t};\n};\n\nexport const tryLogin = async (email, password, model, SECRET, SECRET2) => {\n\tconst user = await model.findOne({ email });\n\tif (!user) {\n\t\treturn {\n\t\t\tok: false,\n\t\t\terrors: { path: 'email', message: 'Wrong email' },\n\t\t};\n\t}\n\n\tconst valid = await bcrypt.compare(password, user.password);\n\n\tif (!valid) {\n\t\treturn {\n\t\t\tok: false,\n\t\t\terrors: { path: 'password', message: 'Wrong password' },\n\t\t};\n\t}\n\n\tconst refreshTokenSecret = user.password + SECRET2;\n\n\tconst [token, refreshToken] = await createTokens(\n\t\tuser,\n\t\tSECRET,\n\t\trefreshTokenSecret,\n\t);\n\n\treturn { ok: true, user, token, refreshToken };\n};"],"file":"auth.js"}