{"version":3,"sources":["../server/server.js"],"names":["require","config","SECRET","process","env","SECRET2","typeDefs","path","join","__dirname","resolvers","startServer","app","use","express","get","req","res","sendFile","resolve","addUser","next","token","headers","jwt","verify","user","refreshToken","newTokens","set","mongoose","connect","db","useNewUrlParser","useCreateIndex","err","console","log","ApolloServer","context","applyMiddleware","listen","port"],"mappings":"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","sourcesContent":["import express from 'express';\nimport { ApolloServer } from 'apollo-server-express';\nimport { fileLoader, mergeTypes, mergeResolvers } from 'merge-graphql-schemas';\nimport { db, port } from './bin/config.js';\nimport path from 'path';\nimport mongoose from 'mongoose';\nimport cors from 'cors';\nimport { refreshTokens } from './utils/auth.js';\nimport jwt from 'jsonwebtoken';\nrequire('dotenv').config();\n\nconst SECRET = process.env.SECRET;\nconst SECRET2 = process.env.SECRET2;\n\nconst typeDefs = mergeTypes(fileLoader(path.join(__dirname, './schema')));\nconst resolvers = mergeResolvers(\n\tfileLoader(path.join(__dirname, './resolvers')),\n);\n\nconst startServer = () => {\n\tconst app = express();\n\n\tapp.use(cors('*'));\n\n\tapp.use(express.static('dist'));\n\tapp.get('*', (req, res) => {\n\t\tres.sendFile(path.resolve('dist', 'index.html'));\n\t})\n\n\tconst addUser = async (req, res, next) => {\n\t\tconst token = req.headers['x-token'];\n\t\tif (token) {\n\t\t\ttry {\n\t\t\t\tconst { user } = jwt.verify(token, SECRET);\n\t\t\t\treq.user = user;\n\t\t\t} catch (err) {\n\t\t\t\tconst refreshToken = req.headers['x-refresh-token'];\n\t\t\t\tconst newTokens = await refreshTokens(\n\t\t\t\t\ttoken,\n\t\t\t\t\trefreshToken,\n\t\t\t\t\tSECRET,\n\t\t\t\t\tSECRET2,\n\t\t\t\t);\n\t\t\t\tif (newTokens.token && newTokens.refreshToken) {\n\t\t\t\t\tres.set(\n\t\t\t\t\t\t'Access-Control-Expose-Headers',\n\t\t\t\t\t\t'x-token, x-refresh-token',\n\t\t\t\t\t);\n\t\t\t\t\tres.set('x-token', newTokens.token);\n\t\t\t\t\tres.set('x-refresh-token', newTokens.refreshToken);\n\t\t\t\t}\n\t\t\t\treq.user = newTokens.user;\n\t\t\t}\n\t\t}\n\t\tnext();\n\t};\n\n\tapp.use(addUser);\n\n\tmongoose.connect(\n\t\tdb,\n\t\t{ useNewUrlParser: true, useCreateIndex: true },\n\t\t(err, res) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('mongodb failed to connect');\n\t\t\t\tconsole.log(err);\n\t\t\t} else {\n\t\t\t\tconsole.log('connection success');\n\t\t\t}\n\t\t},\n\t);\n\n\tnew ApolloServer({\n\t\ttypeDefs,\n\t\tresolvers,\n\t\tcontext: ({ req }) => ({\n\t\t\tSECRET,\n\t\t\tSECRET2,\n\t\t\tuser: req.user,\n\t\t}),\n\t}).applyMiddleware({ app });\n\n\tapp.listen({ port }, () => {\n\t\tconsole.log(`Server runnning on port ${port}`);\n\t});\n};\n\nstartServer();\n"],"file":"server.js"}