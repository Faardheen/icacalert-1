{"version":3,"sources":["../../server/resolvers/user.js"],"names":["Mutation","register","_","args","errMsg","email","phone","password","bcrypt","hash","hashedPassword","User","findOne","currentUser","errors","isValid","USER_EXISTS","save","user","ok","name","VAL_ERR","INV_NO","REG_ERR","login","SECRET","SECRET2"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;eAEe;AACdA,EAAAA,QAAQ,EAAE;AACTC,IAAAA,QAAQ;AAAA;AAAA;AAAA,mCAAE,iBAAOC,CAAP,EAAUC,IAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AACLC,gBAAAA,MADK,GACI,EADJ;AAEDC,gBAAAA,KAFC,GAE0BF,IAF1B,CAEDE,KAFC,EAEMC,KAFN,GAE0BH,IAF1B,CAEMG,KAFN,EAEaC,QAFb,GAE0BJ,IAF1B,CAEaI,QAFb;AAAA;AAAA,uBAGoBC,mBAAOC,IAAP,CAAYF,QAAZ,EAAsB,EAAtB,CAHpB;;AAAA;AAGHG,gBAAAA,cAHG;AAAA;AAAA,uBAIiBC,iBAAKC,OAAL,CAAa;AAAEP,kBAAAA,KAAK,EAALA;AAAF,iBAAb,CAJjB;;AAAA;AAIHQ,gBAAAA,WAJG;AAAA;AAAA,uBAKyB,uCAAsBV,IAAtB,CALzB;;AAAA;AAAA;AAKDW,gBAAAA,MALC,QAKDA,MALC;AAKOC,gBAAAA,OALP,QAKOA,OALP;;AAAA,oBAMJA,OANI;AAAA;AAAA;AAAA;;AAORX,gBAAAA,MAAM,GAAGU,MAAM,CAACT,KAAP,IAAgBS,MAAM,CAACP,QAAvB,IAAmCO,MAAM,CAACR,KAAnD;AAPQ,iDAQD,yBAAQ,KAAR,EAAe,UAAf,EAA2BF,MAA3B,CARC;;AAAA;AAAA,qBAULS,WAVK;AAAA;AAAA;AAAA;;AAAA,iDAWD,yBAAQ,KAAR,EAAe,UAAf,EAA2BG,sBAA3B,CAXC;;AAAA;AAAA;AAAA;AAAA,uBAcW,IAAIL,gBAAJ,CAAS;AAC3BN,kBAAAA,KAAK,EAALA,KAD2B;AAE3BC,kBAAAA,KAAK,EAALA,KAF2B;AAG3BC,kBAAAA,QAAQ,EAAEG;AAHiB,iBAAT,EAIhBO,IAJgB,EAdX;;AAAA;AAcFC,gBAAAA,IAdE;AAAA,iDAoBD;AAAEC,kBAAAA,EAAE,EAAE,IAAN;AAAYD,kBAAAA,IAAI,EAAJA;AAAZ,iBApBC;;AAAA;AAAA;AAAA;AAsBRd,gBAAAA,MAAM,GAAG,YAAIgB,IAAJ,KAAaC,kBAAb,GAAuBC,iBAAvB,GAAgCC,kBAAzC;AAtBQ,iDAuBD,yBAAQ,KAAR,EAAe,UAAf,EAA2BnB,MAA3B,CAvBC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OADC;AA2BToB,IAAAA,KAAK,EAAE,eAACtB,CAAD,gBAAiD;AAAA,UAA3CG,KAA2C,SAA3CA,KAA2C;AAAA,UAApCE,QAAoC,SAApCA,QAAoC;AAAA,UAAtBkB,MAAsB,SAAtBA,MAAsB;AAAA,UAAdC,OAAc,SAAdA,OAAc;AACvD,aAAO,oBAASrB,KAAT,EAAgBE,QAAhB,EAA0BI,gBAA1B,EAAgCc,MAAhC,EAAwCC,OAAxC,CAAP;AACA;AA7BQ;AADI,C","sourcesContent":["import bcrypt from 'bcrypt';\nimport User from '../models/User.js';\nimport validateRegisterInput from '../utils/validateRegisterInput.js';\nimport { USER_EXISTS, VAL_ERR, INV_NO, REG_ERR } from '../constants.js';\nimport showErr from '../utils/showErr.js';\nimport { tryLogin } from '../utils/auth.js';\n\nexport default {\n\tMutation: {\n\t\tregister: async (_, args) => {\n\t\t\tlet errMsg = '';\n\t\t\tconst { email, phone, password } = args;\n\t\t\tconst hashedPassword = await bcrypt.hash(password, 12);\n\t\t\tconst currentUser = await User.findOne({ email });\n\t\t\tconst { errors, isValid } = await validateRegisterInput(args);\n\t\t\tif (!isValid) {\n\t\t\t\terrMsg = errors.email || errors.password || errors.phone;\n\t\t\t\treturn showErr(false, 'register', errMsg);\n\t\t\t}\n\t\t\tif (currentUser) {\n\t\t\t\treturn showErr(false, 'register', USER_EXISTS);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst user = await new User({\n\t\t\t\t\temail,\n\t\t\t\t\tphone,\n\t\t\t\t\tpassword: hashedPassword,\n\t\t\t\t}).save();\n\n\t\t\t\treturn { ok: true, user };\n\t\t\t} catch (err) {\n\t\t\t\terrMsg = err.name === VAL_ERR ? INV_NO : REG_ERR;\n\t\t\t\treturn showErr(false, 'register', errMsg);\n\t\t\t}\n\t\t},\n\t\tlogin: (_, { email, password }, { SECRET, SECRET2 }) => {\n\t\t\treturn tryLogin(email, password, User, SECRET, SECRET2);\n\t\t},\n\t},\n};\n"],"file":"user.js"}